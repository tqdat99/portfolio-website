#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('portfolio-website:httpServer');
var http = require('http');
var https = require('https');
var fs = require('fs');

var httpPort = normalizePort(process.env.PORT || '1234');
//var httpsPort = normalizePort(process.env.PORT || '1235');
//var hostname = 'tqdattest.com';
// var httpsOptions = {
//     cert: fs.readFileSync('tqdat_me.crt'),
//     ca: [
//         fs.readFileSync('SectigoRSADomainValidationSecureServerCA.crt'),
//         fs.readFileSync('AddTrustExternalCARoot.crt'),
//         fs.readFileSync('USERTrustRSAAddTrustCA.crt')
//     ],
//     key: fs.readFileSync('HSSL-5e5f1d282d00c.key')
// };

/**
 * Create HTTP httpServer.
 */

var httpServer = http.createServer(app);
//var httpsServer = https.createServer(httpsOptions, app);

/**
 * Listen on provided httpPort, on all network interfaces.
 */

httpServer.listen(httpPort);
//httpsServer.listen(httpsPort);

httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a httpPort into a number, string, or false.
 */

function normalizePort(val) {
    var httpPort = parseInt(val, 10);

    if (isNaN(httpPort)) {
        // named pipe
        return val;
    }

    if (httpPort >= 0) {
        // httpPort number
        return httpPort;
    }

    return false;
}

/**
 * Event listener for HTTP httpServer "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof httpPort === 'string' ?
        'Pipe ' + httpPort :
        'Port ' + httpPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP httpServer "listening" event.
 */

function onListening() {
    var addr = httpServer.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'httpPort ' + addr.httpPort;
    debug('Listening on ' + bind);
}